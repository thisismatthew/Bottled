#pragma kernel CSMainVel
#pragma kernel CSMainPos

//The following compute shader is based on the work by Andy Green.
//#pragma target 4.0
#define SPRING_COUNT 16
struct Properties
{
    float damping;
    float springStiffness;
};


RWTexture2D<float4>Result;
RWStructuredBuffer<float> springPositionsArray;
RWStructuredBuffer<float> spring1DVelocityArray;
RWStructuredBuffer<float> externalForcesBuffer;
RWStructuredBuffer<float> deltaTimeBuffer;
RWStructuredBuffer<Properties> propertiesBuffer;
//2d array to 1d
int Id2dTo1d(uint2 idxy, int length)
{
    int output = length * idxy.x +idxy.y;

    return output;
}
//external force
float findAdd(float ext)
{   
     return ext;
}

[numthreads (SPRING_COUNT, SPRING_COUNT, 1)]
void CSMainVel (uint3 id : SV_DispatchThreadID)
{
    
    // Get our 1Dimensional id for writing to our buffer
   int id1d = Id2dTo1d(id.xy, SPRING_COUNT);
  
   const float stiffness = propertiesBuffer[0].springStiffness;
   const float damp = propertiesBuffer[0].damping;

   float timestep = deltaTimeBuffer[0];
   float springHeight = springPositionsArray[id1d];
   float velocity = spring1DVelocityArray[id1d];
   float acceleration = 0;

   //boundaries
   int minX = (int)id.x - 1;
   int minY = (int)id.y - 1;
   int maxX = (int)id.x + 1;
   int maxY = (int)id.y + 1;
  
   for (int x = minX; x <= maxX; x++){
       for (int y = minY; y <= maxY; y++){
           // Ignore self
           if (x == (int)id.x && y == (int)id.y){
               continue;
           }
           float nHeight = 0;
           float nVel = 0;

           // Skip out of range spring IDs
           if (x < 1 
               || y < 1 
               || x > SPRING_COUNT-2
               || y > SPRING_COUNT-2){
               continue;
           }
           else {
               int nId = Id2dTo1d(int2(x, y), SPRING_COUNT);
               nHeight = springPositionsArray[nId];
               nVel = spring1DVelocityArray[nId];
           }
          
           float dampingForce = (nVel - velocity) * damp;
           acceleration += ((nHeight - springHeight) * stiffness)+dampingForce;
           if ((int)id.y < 2 || (int)id.y>14) {
               acceleration = 0;
           }
       }
   }
    
   spring1DVelocityArray[id1d] = spring1DVelocityArray[id1d] + acceleration * timestep;

}

[numthreads (SPRING_COUNT, SPRING_COUNT, 1)]
void CSMainPos (uint3 id : SV_DispatchThreadID)
{
    float timestep = deltaTimeBuffer[0];
    int id1d = Id2dTo1d(id.xy, SPRING_COUNT);

    //adding external forces while trying to reign in the chain reaction
    float velocity = spring1DVelocityArray[id1d];
    float exadd = findAdd(externalForcesBuffer[id1d]);
    velocity = velocity + exadd;

    float pos = saturate(springPositionsArray[id1d] + velocity * timestep);

    springPositionsArray[id1d] = pos;

    // Pack into texture
    Result[id.xy] = saturate(pos);

}
